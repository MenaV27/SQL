# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the average popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10

#After I determined what artist released the longest song
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms desc
LIMIT 1

#Then I decided to answer, what's the average danceability for the 10 most popular songs?
SELECT avg(danceability), track_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY track_name, popularity
ORDER BY popularity desc
LIMIT 10

#Which track has the highest tempo?
SELECT artist_name, track_name, tempo
FROM BIT_DB.Spotifydata
ORDER BY tempo DESC
LIMIT 1

#How many tracks are in each key?
SELECT count(track_name), song_key
FROM BIT_DB.Spotifydata
GROUP BY song_key;

#Which artist has the most tracks in the dataset?
SELECT 
    artist_name,
    COUNT(*) as track_count
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY track_count DESC
LIMIT 1;

#What's the average duration of tracks for each artist?
SELECT 
    artist_name,
    AVG(duration_ms) as avg_duration_ms,
    AVG(duration_ms / 1000.0 / 60.0) as avg_duration_minutes
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_duration_ms DESC;

#How does instrumentalness relate to popularity?
SELECT 
    instrumentalness,
    AVG(popularity) as avg_popularity,
    COUNT(*) as track_count
FROM BIT_DB.Spotifydata
GROUP BY instrumentalness
ORDER BY instrumentalness;

#Which track has the highest speechiness?
SELECT track_name, speechiness, artist_name
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY speechiness desc
LIMIT 1;




